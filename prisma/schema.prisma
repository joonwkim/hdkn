generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model TreeNode {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  orderBy  Int?
  name     String
  icon     String?
  url      String?
  expanded Boolean    @default(false)
  selected Boolean?   @default(false)
  active   Boolean    @default(true)
  // level    Int
  parentId String?    @db.ObjectId
  parent   TreeNode?  @relation("TreeRelation", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children TreeNode[] @relation("TreeRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LexicalDocument {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  url       String?
  content   String // JSON content as a string
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  // images           Image[] 
  // CloudinaryData   CloudinaryData? @relation(fields: [cloudinaryDataId], references: [id])
  // cloudinaryDataId String?         @db.ObjectId

  @@unique([userId, title])
}

model Todo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cellPhoneNumber String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Role {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  roleName String     @unique
  users    UserRole[] // Define the relation to UserRole
}

model User {
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String              @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  isActive               Boolean             @default(true)
  terms                  Boolean             @default(true)
  googleLogin            Boolean             @default(false)
  provider               String?
  refreshToken           String[]
  notificationCount      Int                 @default(0)
  roles                  UserRole[]
  profile                Profile?
  blogs                  Blog[]
  votes                  Vote[]
  membershipProcessedBys MembershipRequest[] @relation("membershipProcessedBys")
  membershipRequestedBys MembershipRequest[] @relation("membershipRequestedBys")
  comments               Comment[]
  userGroups             UserGroup[]
  messages               Message[]
  messageRecipients      MessageRecipient[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  LexicalDocument        LexicalDocument[]
}

model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  roleId String @db.ObjectId

  user User @relation(fields: [userId], references: [id]) // Foreign key to User
  role Role @relation(fields: [roleId], references: [id]) // Foreign key to Role

  @@unique([userId, roleId]) // Ensure unique user-role pairs
  @@index([userId]) // Optional index for better query performance
  @@index([roleId]) // Optional index for better query performance
}

model Group {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  isActive Boolean @default(true)

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userGroups        UserGroup[]
  messageRecipients MessageRecipient[]
}

model UserGroup {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  // user   User   @relation(fields: [userId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId])
}

model Message {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String?
  message String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  messageRecipients MessageRecipient[]
}

model MessageRecipient {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  recepient   User?   @relation(fields: [recepientId], references: [id])
  recepientId String? @db.ObjectId

  message   Message @relation(fields: [messageId], references: [id])
  messageId String  @db.ObjectId

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String? @db.ObjectId
  isRead  Boolean @default(false)
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  blogs Blog[]
}

enum ThumbsStatus {
  ThumbsUp
  ThumbsDown
  None
}

model Vote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  thumbsStatus ThumbsStatus
  forked       Boolean      @default(false)

  blog      Blog   @relation(fields: [knowHowId], references: [id], onDelete: Cascade)
  knowHowId String @db.ObjectId

  voter     User     @relation(fields: [voterId], references: [id])
  voterId   String   @db.ObjectId
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId
}

model MembershipRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  membershipRequestStatus MembershipRequestStatus

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String @db.ObjectId

  membershipProcessedBy   User?   @relation("membershipProcessedBys", fields: [membershipProcessedById], references: [id])
  membershipProcessedById String? @db.ObjectId

  membershipRequestedBy   User   @relation("membershipRequestedBys", fields: [membershipRequestedById], references: [id])
  membershipRequestedById String @db.ObjectId

  processedAt DateTime @updatedAt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stage {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  stageTitle String

  stage Int @default(0)

  parentKnowhowId String @db.ObjectId
  parentKnowhow   Blog   @relation(fields: [parentKnowhowId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // stageContents StageContents[]
}

model Blog {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  viewCount Int     @default(0)
  likes     Int     @default(0)
  dislikes  Int     @default(0)
  isPublic  Boolean @default(true)
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
  isGroupType Boolean @default(false)
  tagIds String[] @db.ObjectId
  tags   Tag[]    @relation(fields: [tagIds], references: [id])
  votes Vote[]
  membershipRequest MembershipRequest[]
  parentId String? @db.ObjectId
  parent   Blog?   @relation("KnowhowParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Blog[]  @relation("KnowhowParentChildren")
  stages Stage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments Comment[]
  @@unique([title, authorId])
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  comment  String
  likes    Int    @default(0)
  dislikes Int    @default(0)

  // bulletinBoardId String        @db.ObjectId
  // bulletinBoard   BulletinBoard @relation(fields: [bulletinBoardId], references: [id])

  commentWriterId String @db.ObjectId
  commentWriter   User   @relation(fields: [commentWriterId], references: [id])

  parentCommentId String?   @db.ObjectId
  parentComment   Comment?  @relation("CommentParentChildren", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children        Comment[] @relation("CommentParentChildren")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]
  Blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?  @db.ObjectId
}

enum MembershipRequestStatus {
  NONE
  REQUESTED
  APPROVED
  JOINED
  REJECTED
  PENDING
  CLOSED
}

model Tag {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @unique

  knowHowIds String[] @db.ObjectId
  blogs      Blog[]   @relation(fields: [knowHowIds], references: [id])
}
